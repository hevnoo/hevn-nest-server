generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id         String   @id @default(cuid())
  username   String   @db.VarChar(36)
  password   String   @db.VarChar(64)
  email      String?  @db.VarChar(255)
  phone      String?  @db.VarChar(15)
  openid     String?  @db.VarChar(36) // 微信openid
  nickname   String?  @db.VarChar(20)
  avatar     String?  @db.VarChar(255)
  status     Boolean? @default(true)
  // 通用字段
  createtime DateTime @default(now())
  updatetime DateTime @updatedAt
  deletetime BigInt   @default(0) // 软删除时间，未删除的记录：deletetime = 0， deletetime = 删除时的时间戳（毫秒）
  creator    String?  @db.Char(36)
  updater    String?  @db.Char(36)

  roles      roles[]      @relation("users_roles") // 反向关联，表示多对多关系，虚拟字段
  department department[] @relation("users_department") // 反向关联，表示多对多关系，虚拟字段
  post       post[] //反向关联

  @@unique([email, deletetime]) // 复合唯一索引
  @@unique([openid, deletetime])
  @@unique([phone, deletetime])
  @@unique([username, deletetime])
  @@index([deletetime]) // 添加单独索引提高查询性能
}

// 角色模型控制permission、menu、button等权限
model roles {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(36) // 角色名称（如 "admin", "user"）
  value       String       @db.VarChar(36) // 角色值（如 "admin", "user"）
  description String? // 角色描述
  order       Int          @default(0) // 排序
  // 关联关系
  users       users[]      @relation("users_roles") // 多对多
  permission  permission[] @relation("roles_permission") // 多对多关系
  menu        menu[]       @relation("roles_menu") // 与菜单多对多
  buttons     buttons[]    @relation("roles_buttons") // 与按钮多对多
  // 通用字段
  createtime  DateTime     @default(now())
  updatetime  DateTime     @updatedAt
  deletetime  BigInt       @default(0) // 添加软删除时间
  creator     String?      @db.Char(36)
  updater     String?      @db.Char(36)

  @@unique([value, deletetime])
  @@index([deletetime]) // 添加单独索引提高查询性能
}

model permission {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(36) // 权限名称（如 "view_user", "delete_user"）
  value       String   @db.VarChar(36) // 权限值（如 "view_user", "delete_user"）
  description String? // 权限描述
  roles       roles[]  @relation("roles_permission") // 多对多关系
  // 通用字段
  createtime  DateTime @default(now())
  updatetime  DateTime @updatedAt
  deletetime  BigInt   @default(0) // 添加软删除时间
  creator     String?  @db.Char(36)
  updater     String?  @db.Char(36)

  @@unique([value, deletetime])
  @@index([deletetime]) // 添加单独索引提高查询性能
}

model menu {
  id         String    @id @default(cuid())
  label      String    @db.VarChar(50) // 菜单名称
  name       String?   @db.VarChar(50) // 路由名称编码
  path       String?   @db.VarChar(100) // 路由路径
  component  String?   @db.VarChar(100) // 组件路径
  redirect   String?   @db.VarChar(100) // 重定向路径
  meta       Json? // 存储元数据，包含 title、icon、keepAlive 等。默认返回对象格式的数据，存入的数据是对象
  // meta 示例: { "title": "系统管理", "icon": "SettingOutlined", "keepAlive": true }
  icon       String?   @db.VarChar(50) // 图标
  order      Int       @default(0) // 排序
  hidden     Boolean   @default(false) // 是否隐藏
  // 关联关系
  parent_id  String? // 父级菜单ID
  parent     menu?     @relation("menu_tree", fields: [parent_id], references: [id], onDelete: SetNull)
  children   menu[]    @relation("menu_tree")
  roles      roles[]   @relation("roles_menu") // 与角色多对多
  buttons    buttons[] // 菜单包含的按钮
  // 通用字段
  createtime DateTime  @default(now())
  updatetime DateTime  @updatedAt
  deletetime BigInt    @default(0) // 添加软删除时间
  creator    String?   @db.Char(36)
  updater    String?   @db.Char(36)

  @@unique([name, parent_id, deletetime])
  @@index([parent_id, deletetime])
}

model buttons {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(50) // 按钮名称
  value      String   @db.VarChar(50) // 按钮值
  code       String?  @db.VarChar(50) // 按钮标识符（如：add, edit, delete）
  order      Int      @default(0) // 排序
  // 关联关系
  menu_id    String // 所属菜单
  menu       menu     @relation(fields: [menu_id], references: [id])
  roles      roles[]  @relation("roles_buttons") // 与角色多对多
  // 通用字段
  createtime DateTime @default(now())
  updatetime DateTime @updatedAt
  deletetime BigInt   @default(0) // 添加软删除时间
  creator    String?  @db.Char(36)
  updater    String?  @db.Char(36)

  @@unique([code, menu_id, deletetime])
  @@index([menu_id, deletetime]) // 添加索引提高查询性能
}

model department {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(50) // 部门名称
  code        String       @db.VarChar(50) // 部门编码
  order       Int          @default(0) // 排序
  status      Int          @default(1) // 状态：0-禁用 1-启用
  description String?      @db.VarChar(255) // 描述
  // 关联关系
  parent_id   String? // 父级部门ID
  parent      department?  @relation("department_tree", fields: [parent_id], references: [id], onDelete: SetNull)
  children    department[] @relation("department_tree")
  users       users[]      @relation("users_department") // 反向关联，表示多对多关系，虚拟字段
  // 通用字段
  createtime  DateTime     @default(now())
  updatetime  DateTime     @updatedAt
  deletetime  BigInt       @default(0)
  creator     String?      @db.Char(36)
  updater     String?      @db.Char(36)

  @@unique([code, parent_id, deletetime])
  @@index([parent_id, deletetime])
}

model dict_type {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50) // 字典类型名称
  value       String   @db.VarChar(50) // 字典类型值
  order       Int      @default(0) // 排序
  status      Boolean  @default(true)
  description String?  @db.VarChar(255) // 描述
  // 关联关系
  dict        dict[] // 关联的字典项
  // parent_id   String? // 父级ID
  // parent      dict_type?  @relation("dict_type_tree", fields: [parent_id], references: [id], onDelete: SetNull)
  // children    dict_type[] @relation("dict_type_tree")
  // 通用字段
  createtime  DateTime @default(now())
  updatetime  DateTime @updatedAt
  deletetime  BigInt   @default(0)
  creator     String?  @db.Char(36)
  updater     String?  @db.Char(36)

  @@unique([value, deletetime])
  @@index([deletetime])
}

model dict {
  id         String    @id @default(cuid())
  dict_name  String    @db.VarChar(50) // 翻译名称label
  dict_value String    @db.VarChar(50) // 取值
  language   String?   @db.VarChar(10) // 语言类型：zh/en等
  order      Int       @default(0) // 排序
  status     Boolean   @default(true)
  remark     String?   @db.VarChar(255) // 备注说明
  color      String?   @db.VarChar(20) // 颜色值
  is_default Boolean   @default(false) // 是否默认
  json_data  Json? // 额外数据，灵活存储
  valid_from DateTime? @db.Timestamp // 生效时间，时间戳
  valid_to   DateTime? @db.Timestamp // 失效时间

  // 通用字段
  createtime DateTime @default(now())
  updatetime DateTime @updatedAt
  deletetime BigInt   @default(0) // 添加软删除时间
  creator    String?  @db.Char(36)
  updater    String?  @db.Char(36)

  // 关联关系
  dict_type_id String    @db.VarChar(50) // 字典类型编码
  dict_type    dict_type @relation(fields: [dict_type_id], references: [id]) // 添加关联

  @@unique([dict_value, dict_type_id, language, deletetime]) // 常一起使用的可使用组合索引优化查询性能
  @@index([deletetime])
}

model post {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(100)
  content     String
  // 关联关系
  user_id     String
  users       users     @relation(fields: [user_id], references: [id])
  category_id String?
  category    category? @relation(fields: [category_id], references: [id])
  // 通用字段
  createtime  DateTime  @default(now())
  updatetime  DateTime  @updatedAt
  deletetime  BigInt    @default(0)
  creator     String?   @db.Char(36)
  updater     String?   @db.Char(36)

  @@unique([title, user_id, deletetime])
  @@index([category_id], map: "post_category_id_fkey") // 使用map为索引指定特定名称
  @@index([user_id], map: "post_user_id_fkey")
}

model category {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(64)
  // 通用字段
  createtime DateTime @default(now())
  updatetime DateTime @updatedAt
  deletetime BigInt   @default(0) // 添加软删除时间
  creator    String?  @db.Char(36)
  updater    String?  @db.Char(36)
  post       post[] // 反向关联

  @@unique([name, deletetime])
  @@index([deletetime])
}

// 通用字段参考
/// id          Int      @id @default(autoincrement())
/// createtime  DateTime @default(now())
/// updatetime  DateTime @updatedAt
/// deletetime  BigInt   @default(0) // 添加软删除时间
/// creator     String?  @db.Char(36)
/// updater     String?  @db.Char(36)
/// creator     users?   @relation("EntityCreatedBy", fields: [creator], references: [id])
/// updater     users?   @relation("EntityUpdatedBy", fields: [updater], references: [id])
